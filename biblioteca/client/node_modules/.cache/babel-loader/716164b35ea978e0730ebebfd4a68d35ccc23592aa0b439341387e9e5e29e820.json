{"ast":null,"code":"/**\n * Servicio API - Capa de comunicación con el backend\n * Centraliza todas las peticiones HTTP relacionadas con libros\n * Utiliza Axios para realizar las peticiones al servidor\n */\nimport axios from 'axios';\n\n// URL base de la API, configurable mediante variable de entorno\nconst baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Instancia de Axios con configuración base\nconst api = axios.create({\n  baseURL,\n  timeout: 7000\n});\n\n/**\n * Construye una cadena de query parameters a partir de un objeto\n * Filtra valores nulos, undefined o vacíos\n * @param {Object} params - Objeto con los parámetros a incluir\n * @returns {string} Cadena de query parameters codificada\n */\nconst buildQueryParams = params => {\n  const queryString = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    if (params[key] !== null && params[key] !== undefined && params[key] !== '') {\n      queryString.append(key, params[key]);\n    }\n  });\n  return queryString.toString();\n};\n\n/**\n * Obtiene la lista de libros con opciones de ordenamiento y filtrado\n * @param {string} sortBy - Campo por el cual ordenar (id, titulo, autor, anio)\n * @param {string} sortOrder - Orden ascendente (ASC) o descendente (DESC)\n * @param {string|null} filterBy - Campo por el cual filtrar\n * @param {string|null} filterValue - Valor del filtro\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getLibros = (sortBy = 'id', sortOrder = 'ASC', filterBy = null, filterValue = null) => {\n  const params = {\n    sortBy,\n    sortOrder\n  };\n  if (filterBy && filterValue) {\n    params.filterBy = filterBy;\n    params.filterValue = filterValue;\n  }\n  const queryString = buildQueryParams(params);\n  return api.get(`/libros${queryString ? `?${queryString}` : ''}`);\n};\n\n/**\n * Crea un nuevo libro en la base de datos\n * @param {Object} data - Datos del libro a crear\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const createLibro = data => api.post('/libros', data);\n\n/**\n * Actualiza un libro existente\n * @param {number} id - ID del libro a actualizar\n * @param {Object} data - Nuevos datos del libro\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const updateLibro = (id, data) => api.put(`/libros/${id}`, data);\n\n/**\n * Elimina un libro de la base de datos\n * @param {number} id - ID del libro a eliminar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const deleteLibro = id => api.delete(`/libros/${id}`);\n\n/**\n * Busca libros por título (búsqueda parcial)\n * @param {string} titulo - Término de búsqueda\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const searchLibros = titulo => api.get(`/libros/buscar?titulo=${encodeURIComponent(titulo)}`);\n\n/**\n * Filtra libros por género\n * @param {string} genero - Género a filtrar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByGenre = genero => api.get(`/libros/filtrar/genero/${encodeURIComponent(genero)}`);\n\n/**\n * Filtra libros por autor\n * @param {string} autor - Autor a filtrar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByAuthor = autor => api.get(`/libros/filtrar/autor/${encodeURIComponent(autor)}`);\n\n/**\n * Filtra libros por estado\n * @param {string} estado - Estado a filtrar (Disponible, Prestado, En reparación)\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByStatus = estado => api.get(`/libros/filtrar/estado/${encodeURIComponent(estado)}`);\n\n/**\n * Obtiene la lista de géneros únicos disponibles\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getGenres = () => api.get('/libros/generos');\n\n/**\n * Obtiene la lista de autores únicos disponibles\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getAuthors = () => api.get('/libros/autores');\nexport default api;","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","api","create","timeout","buildQueryParams","params","queryString","URLSearchParams","Object","keys","forEach","key","undefined","append","toString","getLibros","sortBy","sortOrder","filterBy","filterValue","get","createLibro","data","post","updateLibro","id","put","deleteLibro","delete","searchLibros","titulo","encodeURIComponent","filterByGenre","genero","filterByAuthor","autor","filterByStatus","estado","getGenres","getAuthors"],"sources":["E:/Universidad/INTELIGENCIA DE NEGOCIOS/biblioteca/client/src/services/api.js"],"sourcesContent":["/**\n * Servicio API - Capa de comunicación con el backend\n * Centraliza todas las peticiones HTTP relacionadas con libros\n * Utiliza Axios para realizar las peticiones al servidor\n */\nimport axios from 'axios';\n\n// URL base de la API, configurable mediante variable de entorno\nconst baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Instancia de Axios con configuración base\nconst api = axios.create({ baseURL, timeout: 7000 });\n\n/**\n * Construye una cadena de query parameters a partir de un objeto\n * Filtra valores nulos, undefined o vacíos\n * @param {Object} params - Objeto con los parámetros a incluir\n * @returns {string} Cadena de query parameters codificada\n */\nconst buildQueryParams = (params) => {\n  const queryString = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    if (params[key] !== null && params[key] !== undefined && params[key] !== '') {\n      queryString.append(key, params[key]);\n    }\n  });\n  return queryString.toString();\n};\n\n/**\n * Obtiene la lista de libros con opciones de ordenamiento y filtrado\n * @param {string} sortBy - Campo por el cual ordenar (id, titulo, autor, anio)\n * @param {string} sortOrder - Orden ascendente (ASC) o descendente (DESC)\n * @param {string|null} filterBy - Campo por el cual filtrar\n * @param {string|null} filterValue - Valor del filtro\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getLibros = (sortBy = 'id', sortOrder = 'ASC', filterBy = null, filterValue = null) => {\n  const params = { sortBy, sortOrder };\n  if (filterBy && filterValue) {\n    params.filterBy = filterBy;\n    params.filterValue = filterValue;\n  }\n  const queryString = buildQueryParams(params);\n  return api.get(`/libros${queryString ? `?${queryString}` : ''}`);\n};\n\n/**\n * Crea un nuevo libro en la base de datos\n * @param {Object} data - Datos del libro a crear\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const createLibro = (data) => api.post('/libros', data);\n\n/**\n * Actualiza un libro existente\n * @param {number} id - ID del libro a actualizar\n * @param {Object} data - Nuevos datos del libro\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const updateLibro = (id, data) => api.put(`/libros/${id}`, data);\n\n/**\n * Elimina un libro de la base de datos\n * @param {number} id - ID del libro a eliminar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const deleteLibro = (id) => api.delete(`/libros/${id}`);\n\n/**\n * Busca libros por título (búsqueda parcial)\n * @param {string} titulo - Término de búsqueda\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const searchLibros = (titulo) => api.get(`/libros/buscar?titulo=${encodeURIComponent(titulo)}`);\n\n/**\n * Filtra libros por género\n * @param {string} genero - Género a filtrar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByGenre = (genero) => api.get(`/libros/filtrar/genero/${encodeURIComponent(genero)}`);\n\n/**\n * Filtra libros por autor\n * @param {string} autor - Autor a filtrar\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByAuthor = (autor) => api.get(`/libros/filtrar/autor/${encodeURIComponent(autor)}`);\n\n/**\n * Filtra libros por estado\n * @param {string} estado - Estado a filtrar (Disponible, Prestado, En reparación)\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const filterByStatus = (estado) => api.get(`/libros/filtrar/estado/${encodeURIComponent(estado)}`);\n\n/**\n * Obtiene la lista de géneros únicos disponibles\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getGenres = () => api.get('/libros/generos');\n\n/**\n * Obtiene la lista de autores únicos disponibles\n * @returns {Promise} Promesa con la respuesta de Axios\n */\nexport const getAuthors = () => api.get('/libros/autores');\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}